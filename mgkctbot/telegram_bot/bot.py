import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from dotenv import load_dotenv

from mgct_schedule.utils.rediss import save_chat_id
from telegram_bot.schedule_extracting import extract_week_schedule, extract_daily_schedule, \
    extract_previous_week_schedule

load_dotenv()
# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = os.getenv("API_TOKEN", "8192247154:AAE2mFLGN__f9kA3IQYyJayZZEzodje_1i8")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å"),
            KeyboardButton(text="üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
        ]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    chat_id = int(message.chat.id)
    save_chat_id(chat_id)
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: chat_id={chat_id}, username={message.from_user.username or '–±–µ–∑ username'}")
    await message.answer(
        "–¥–∏–Ω–∞—Ö—É",
        reply_markup=menu_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å"
@dp.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å")
async def schedule_day(message: types.Message):
    day = extract_daily_schedule()
    if day == '':
        await message.answer(text="Error")
    else:
        await message.answer(
            text=day,
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"
@dp.message(F.text == "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
async def schedule_week(message: types.Message):
    week = extract_week_schedule()
    if week == '':
        await message.answer(text="Error")
    else:
        await message.answer(
            text=week,
            parse_mode="HTML"
        )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ø—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data="prev_week")]
    ])

    await message.answer(
        text=week,
        parse_mode="HTML",
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo(message: types.Message):
    await message.answer("–±–µ–µ–µ –¥—è–∂–≤—è–≤—Å–∂—Ñ—É–±–π—Ü–¥—É–¥–∂ 654—É654—Ñ—ã–∞–¥–∂–≤—Ñ–≤–±—é, –±—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –¥–µ—Ä–µ–≤–∞ —Å–æ—Ä–≤–∏ –¥–∞ –ø–æ–µ—à—å")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–∫–∏ "–ø—Ä–µ–¥. –Ω–µ–¥–µ–ª—è"
@dp.callback_query(F.data == "prev_week")
async def handle_prev_week(call: CallbackQuery):
    await call.answer()  # —É–±–∏—Ä–∞–µ—Ç "–∫—Ä—É—Ç–∏–ª–∫—É" –≤ –∫–ª–∏–µ–Ω—Ç–µ

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É
    try:
        await call.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏:
    # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è extract_week_schedule_previous(), –∑–∞–º–µ–Ω—è–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
    try:
        week_prev = extract_previous_week_schedule()  # <-- –µ—Å–ª–∏ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    except NameError:
        # fallback: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫–æ–π —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º)
        week_prev = extract_week_schedule()

    if week_prev == '':
        await bot.send_message(chat_id=call.message.chat.id, text="Error")
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "—Å–ª–µ–¥. –Ω–µ–¥–µ–ª—è"
    kb_next = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="—Å–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚û°Ô∏è", callback_data="next_week")]
    ])

    await bot.send_message(
        chat_id=call.message.chat.id,
        text=week_prev,
        parse_mode="HTML",
        reply_markup=kb_next
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–∫–∏ "—Å–ª–µ–¥. –Ω–µ–¥–µ–ª—è"
@dp.callback_query(F.data == "next_week")
async def handle_next_week(call: CallbackQuery):
    await call.answer()

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É
    try:
        await call.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏:
    # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è extract_week_schedule_next(), –∑–∞–º–µ–Ω—è–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
    try:
        week_next = extract_week_schedule()  # <-- –µ—Å–ª–∏ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    except NameError:
        week_next = extract_week_schedule()

    if week_next == '':
        await bot.send_message(chat_id=call.message.chat.id, text="Error")
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ø—Ä–µ–¥. –Ω–µ–¥–µ–ª—è"
    kb_prev = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ø—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data="prev_week")]
    ])

    await bot.send_message(
        chat_id=call.message.chat.id,
        text=week_next,
        parse_mode="HTML",
        reply_markup=kb_prev
    )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())