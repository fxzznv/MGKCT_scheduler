import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot
from pytz import timezone

from mgct_schedule.utils.rediss import push_weekly_schedule, extract_n_push_daily_schedule, get_all_chat_ids
from mgct_schedule.utils.weekly_schedule import get_schedule
from telegram_bot.schedule_extracting import extract_week_schedule

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = "8192247154:AAE2mFLGN__f9kA3IQYyJayZZEzodje_1i8"
bot = Bot(token=API_TOKEN)

async def send_message_to_users(chat_ids, message_text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ —Å–ø–∏—Å–∫—É chat_id."""
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: '{message_text}' –¥–ª—è chat_ids: {chat_ids}")
    for chat_id in chat_ids:
        try:
            await bot.send_message(chat_id=chat_id, text=message_text, parse_mode="HTML")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id {chat_id}: {e}")
        await asyncio.sleep(0.05)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram

async def run_scheduler():
    msk = timezone('Europe/Moscow')
    last_weekly_update = datetime.min.replace(tzinfo=msk)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    last_next_day_update = None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å

    while True:
        now = datetime.now(msk)
        current_date = now.date()

        # 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        if (now - last_weekly_update) >= timedelta(hours=3):
            extracted_schedule = extract_week_schedule()
            logger.info(f"[{now}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è")
            actual_schedule = get_schedule()
            logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: actual_schedule == extracted_schedule: {actual_schedule == extracted_schedule}")
            logger.info(f"actual_schedule: {actual_schedule}")
            logger.info(f"extracted_schedule: {extracted_schedule}")

            # –í—Ä–µ–º–µ–Ω–Ω–æ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ `actual_schedule != extracted_schedule` –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
            if actual_schedule != extracted_schedule:
                logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis")
                push_weekly_schedule(actual_schedule)
                logger.info("–ü—É—à –≤ Redis –≤—ã–ø–æ–ª–Ω–µ–Ω")

                chat_ids = get_all_chat_ids()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã chat_ids: {chat_ids}")
                if chat_ids:
                    await send_message_to_users(chat_ids, "üì¢ <b>–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –∫–Ω–æ–ø–æ–∫.")
                else:
                    logger.warning("–°–ø–∏—Å–æ–∫ chat_ids –ø—É—Å—Ç, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

            # –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            today_str = now.strftime('%d.%m.%Y')
            extract_n_push_daily_schedule(today_str)
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {today_str} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            last_weekly_update = now

        # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≤ 17:00
        if now.hour == 17 and now.minute < 5 and (last_next_day_update is None or last_next_day_update.date() != current_date):
            logger.info(f"[{now}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å")
            tomorrow = now + timedelta(days=1)
            tomorrow_str = tomorrow.strftime('%d.%m.%Y')
            extract_n_push_daily_schedule(tomorrow_str)
            logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å ({tomorrow_str}) –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            last_next_day_update = now

        # 3. –°–±—Ä–æ—Å –≤ 00:00: –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        if now.hour == 0 and now.minute < 5:
            logger.info(f"[{now}] –°–±—Ä–æ—Å –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å")
            today_str = now.strftime('%d.%m.%Y')
            extract_n_push_daily_schedule(today_str)
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {today_str} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            last_next_day_update = None  # –°–±—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    try:
        await run_scheduler()
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())